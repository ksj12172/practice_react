{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; // 쪼갠걸 합쳐주는 거 : 객체와 달리 함수는 합치기 쉽지 않아서 필요\n\nimport { combineReducers } from 'redux'; // 쪼갠걸 불러온다\n\nimport user from './user';\nimport post from './post'; // initialState에서 state를 user와 post로 구분해서 각각을 위해 js 파일을 만든다\n// user와 post 안에 있던 state들을 파일로 옮긴다\n// 또한 해당 파일 안에서 export 시킨다\n\nvar initialState = {\n  user: {},\n  post: {}\n}; // action creator\n\nvar changeNickname = function changeNickname(data) {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data: data\n  };\n}; // (이전 상태, action) => 다음 상태\n\n\nvar rootReducer = combineReducers({\n  // redux serverside rendering을 위해서 HYDRATE가 필요하다\n  // HYDRATE를 위해서 index reducer 추가\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      // reducer 초기화할 때도 실행되므로 필요\n\n      default:\n        return state;\n    }\n  },\n  // combine reducer가 알아서 initialState 넣어준다\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["D:/0_0study/react_practice/test/10/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","changeNickname","data","type","rootReducer","index","state","action","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB,C,CACA;;AACA,SAAQC,eAAR,QAA8B,OAA9B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG;AACjBF,EAAAA,IAAI,EAAC,EADY;AAGjBC,EAAAA,IAAI,EAAC;AAHY,CAArB,C,CAMA;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAC,iBADF;AAEHD,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CALD,C,CAOA;;;AACA,IAAME,WAAW,GAAGP,eAAe,CAAC;AACnC;AACA;AACAQ,EAAAA,KAAK,EAAC,iBAAqB;AAAA,QAApBC,KAAoB,uEAAd,EAAc;AAAA,QAAXC,MAAW;;AACxB,YAAQA,MAAM,CAACJ,IAAf;AACI,WAAKP,OAAL;AACI,+CAAWU,KAAX,GAAqBC,MAAM,CAACC,OAA5B;AACJ;;AACA;AACI,eAAOF,KAAP;AALR;AAOF,GAXkC;AAYnC;AACAR,EAAAA,IAAI,EAAJA,IAbmC;AAcnCC,EAAAA,IAAI,EAAJA;AAdmC,CAAD,CAAnC;AAiBA,eAAeK,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper';\r\n// 쪼갠걸 합쳐주는 거 : 객체와 달리 함수는 합치기 쉽지 않아서 필요\r\nimport {combineReducers} from 'redux';\r\n// 쪼갠걸 불러온다\r\nimport user from './user';\r\nimport post from './post';\r\n\r\n// initialState에서 state를 user와 post로 구분해서 각각을 위해 js 파일을 만든다\r\n// user와 post 안에 있던 state들을 파일로 옮긴다\r\n// 또한 해당 파일 안에서 export 시킨다\r\nconst initialState = {\r\n    user:{        \r\n    },\r\n    post:{\r\n    }\r\n}\r\n// action creator\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type:'CHANGE_NICKNAME',\r\n        data\r\n    }\r\n}\r\n\r\n// (이전 상태, action) => 다음 상태\r\nconst rootReducer = combineReducers({\r\n\t// redux serverside rendering을 위해서 HYDRATE가 필요하다\r\n\t// HYDRATE를 위해서 index reducer 추가\r\n\tindex:(state={},action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {...state, ...action.payload};\r\n        // reducer 초기화할 때도 실행되므로 필요\r\n        default:\r\n            return state;\r\n\t\t}\r\n\t},\r\n\t// combine reducer가 알아서 initialState 넣어준다\r\n\tuser,\r\n\tpost\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}