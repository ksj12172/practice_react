{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpdata: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; // action creator\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n}; // action creator\n\n\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = data => {\n  return {\n    type: 'LOG_OUT'\n  };\n};\n\nconst rootReducer = (state = iniialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n    // reducer 초기화할 때도 실행되므로 필요\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["D:/0_0study/react_practice/test/10/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpdata","loginData","post","mainPosts","changeNickname","data","type","loginAction","logoutAction","rootReducer","state","iniialState","action","payload"],"mappings":";;;;;;AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,UAAU,EAAC,KADV;AAEDD,IAAAA,IAAI,EAAC,IAFJ;AAGDE,IAAAA,UAAU,EAAC,EAHV;AAIDC,IAAAA,SAAS,EAAC;AAJT,GADY;AAOjBC,EAAAA,IAAI,EAAC;AACDC,IAAAA,SAAS,EAAC;AADT;AAPY,CAArB,C,CAWA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAC,iBADF;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD,C,CAMA;;;AACA,OAAO,MAAME,WAAW,GAAIF,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAC,QADF;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAMP,OAAO,MAAMG,YAAY,GAAIH,IAAD,IAAU;AAClC,SAAO;AACHC,IAAAA,IAAI,EAAC;AADF,GAAP;AAIH,CALM;;AAOP,MAAMG,WAAW,GAAG,CAACC,KAAK,GAACC,WAAP,EAAmBC,MAAnB,KAA8B;AAC9C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKV,OAAL;AACI,6CAAWc,KAAX,GAAqBE,MAAM,CAACC,OAA5B;;AACJ,SAAK,QAAL;AACI,6CACOH,KADP;AAEIZ,QAAAA,IAAI,kCACGY,KAAK,CAACZ,IADT;AAEAC,UAAAA,UAAU,EAAC,IAFX;AAGAD,UAAAA,IAAI,EAACc,MAAM,CAACP;AAHZ;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOK,KADP;AAEIZ,QAAAA,IAAI,kCACGY,KAAK,CAACZ,IADT;AAEAC,UAAAA,UAAU,EAAC,KAFX;AAGAD,UAAAA,IAAI,EAAC;AAHL;AAFR;AAQJ;;AACA;AACI,aAAOY,KAAP;AAvBR;AAyBH,CA1BD;;AA4BA,eAAeD,WAAf","sourcesContent":["import {HYDRATE} from 'next-redux-wrapper';\r\n\r\nconst initialState = {\r\n    user:{\r\n        isLoggedIn:false,\r\n        user:null,\r\n        signUpdata:{},\r\n        loginData:{}\r\n    },\r\n    post:{\r\n        mainPosts:[],\r\n    }\r\n}\r\n// action creator\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type:'CHANGE_NICKNAME',\r\n        data\r\n    }\r\n}\r\n// action creator\r\nexport const loginAction = (data) => {\r\n    return {\r\n        type:'LOG_IN',\r\n        data,\r\n    }\r\n}\r\nexport const logoutAction = (data) => {\r\n    return {\r\n        type:'LOG_OUT',\r\n\r\n    }\r\n}\r\n\r\nconst rootReducer = (state=iniialState,action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {...state, ...action.payload};\r\n        case 'LOG_IN':\r\n            return {\r\n                ...state,\r\n                user : {\r\n                    ...state.user,\r\n                    isLoggedIn:true,\r\n                    user:action.data\r\n                }\r\n            }\r\n        case 'LOG_OUT':\r\n            return {\r\n                ...state,\r\n                user : {\r\n                    ...state.user,\r\n                    isLoggedIn:false,\r\n                    user:null\r\n                }\r\n            }\r\n        // reducer 초기화할 때도 실행되므로 필요\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}